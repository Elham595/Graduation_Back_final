// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using graduation_project.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace graduation_project.Data
{
    public partial class FashionDesignContext
    {
        private IFashionDesignContextProcedures _procedures;

        public virtual IFashionDesignContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new FashionDesignContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IFashionDesignContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetOfferForClientResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetOfferForClientPagesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetOfferForTailorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetOfferForTailorPagesResult>().HasNoKey().ToView(null);
        }
    }

    public partial class FashionDesignContextProcedures : IFashionDesignContextProcedures
    {
        private readonly FashionDesignContext _context;

        public FashionDesignContextProcedures(FashionDesignContext context)
        {
            _context = context;
        }

        public virtual async Task<List<GetOfferForClientResult>> GetOfferForClientAsync(string Ur, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ur",
                    Size = 50,
                    Value = Ur ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetOfferForClientResult>("EXEC @returnValue = [dbo].[GetOfferForClient] @Ur", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetOfferForClientPagesResult>> GetOfferForClientPagesAsync(string Ur, int? page, int? items, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ur",
                    Size = 50,
                    Value = Ur ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "page",
                    Value = page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "items",
                    Value = items ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetOfferForClientPagesResult>("EXEC @returnValue = [dbo].[GetOfferForClientPages] @Ur, @page, @items", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetOfferForTailorResult>> GetOfferForTailorAsync(string ur, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ur",
                    Size = 50,
                    Value = ur ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetOfferForTailorResult>("EXEC @returnValue = [dbo].[GetOfferForTailor] @ur", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetOfferForTailorPagesResult>> GetOfferForTailorPagesAsync(string Ur, int? page, int? items, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Ur",
                    Size = 50,
                    Value = Ur ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "page",
                    Value = page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "items",
                    Value = items ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetOfferForTailorPagesResult>("EXEC @returnValue = [dbo].[GetOfferForTailorPages] @Ur, @page, @items", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
